using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.Intrinsics.X86;


namespace CBT_sudoku
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Voer een sudoku in het volgende format in: \" (1,1) (1,2) (1,3) ... (9, 9)\"");
            Console.WriteLine("Bijvoorbeeld zo:\" 0 0 3 0 2 0 6 0 0 9 0 0 3 0 5 0 0 1 0 0 1 8 0 6 4 0 0 0 0 8 1 0 2 9 0 0 7 0 0 0 0 0 0 0 8 0 0 6 7 0 8 2 0 0 0 0 2 6 0 9 5 0 0 8 0 0 2 0 3 0 0 9 0 0 5 0 1 0 3 0 0\"");
            string sudoku = Console.ReadLine();
            Console.WriteLine("Voer een van de volgende methodes in: CBT (Chronological BackTracking), FC (Forward Checking), FCMCV (Forward Checking met Most Constrained Variable)");
            string methode = Console.ReadLine();
            SudokuSolver solver = new SudokuSolver();
            solver.Solve(new Sudoku(sudoku), methode);
            // Het onderstaande stuk code is gebruikt om data te verzamelen
            bool test = false;
            if (test) 
            {
                string[] sudokus = { " 0 0 3 0 2 0 6 0 0 9 0 0 3 0 5 0 0 1 0 0 1 8 0 6 4 0 0 0 0 8 1 0 2 9 0 0 7 0 0 0 0 0 0 0 8 0 0 6 7 0 8 2 0 0 0 0 2 6 0 9 5 0 0 8 0 0 2 0 3 0 0 9 0 0 5 0 1 0 3 0 0",
                " 2 0 0 0 8 0 3 0 0 0 6 0 0 7 0 0 8 4 0 3 0 5 0 0 2 0 9 0 0 0 1 0 5 4 0 8 0 0 0 0 0 0 0 0 0 4 0 2 7 0 6 0 0 0 3 0 1 0 0 7 0 4 0 7 2 0 0 4 0 0 6 0 0 0 4 0 1 0 0 0 3",
                " 0 0 0 0 0 0 9 0 7 0 0 0 4 2 0 1 8 0 0 0 0 7 0 5 0 2 6 1 0 0 9 0 4 0 0 0 0 5 0 0 0 0 0 4 0 0 0 0 5 0 7 0 0 9 9 2 0 1 0 8 0 0 0 0 3 4 0 5 9 0 0 0 5 0 7 0 0 0 0 0 0",
                " 0 3 0 0 5 0 0 4 0 0 0 8 0 1 0 5 0 0 4 6 0 0 0 0 0 1 2 0 7 0 5 0 2 0 8 0 0 0 0 6 0 3 0 0 0 0 4 0 1 0 9 0 3 0 2 5 0 0 0 0 0 9 8 0 0 1 0 2 0 6 0 0 0 8 0 0 6 0 0 2 0",
                " 0 2 0 8 1 0 7 4 0 7 0 0 0 0 3 1 0 0 0 9 0 0 0 2 8 0 5 0 0 9 0 4 0 0 8 7 4 0 0 2 0 8 0 0 3 1 6 0 0 3 0 2 0 0 3 0 2 7 0 0 0 6 0 0 0 5 6 0 0 0 0 8 0 7 6 0 5 1 0 9 0" };
                string[] methodes = { "CBT", "FC", "FCMCV" };
                SudokuSolver testsolver = new SudokuSolver();
                for (int i = 0; i < methodes.Length; i++) 
                {
                    for (int j = 0 ; j < sudokus.Length; j++)  
                    {
                        Console.WriteLine($"Sudoku {j} methode {methodes[i]}");
                        testsolver.Solve(new Sudoku(sudokus[j]), methodes[i]);
                    }
                }
            }
            
        }
    }

    class SudokuSolver
    {
        static int acties;
        public void Solve(Sudoku sudoku, string methode)
        // Stuurt de oplossingsalgoritmes aan
        {
            acties = 0;
            // Check of de doorgevoerde methode geldig is
            if (methode != "CBT" && methode != "FC" && methode != "FCMCV") Console.WriteLine("Voer een geldige methode in");
            // Als hij geldig is, los de sudoku op met de juiste methode
            else
            {
                Stopwatch timer = new Stopwatch();
                timer.Start();
                bool oplosbaar = true;

                switch (methode)
                {
                    case "CBT":
                        oplosbaar = ChronologicalBackTrack(sudoku);
                        break;

                    case "FC":
                        oplosbaar = ForwardCheckSolve(sudoku);
                        break;

                    case "FCMCV":
                        oplosbaar = ForwardCheckMCVSolve(sudoku);
                        break;
                }

                timer.Stop();
                // Print het resulaat
                if (oplosbaar)
                {
                    Console.WriteLine(sudoku);
                    Console.WriteLine($"Opgelost in {timer.ElapsedMilliseconds} ms");
                    Console.WriteLine($"Acties: {acties}");
                }
                else
                {
                    Console.WriteLine("geen oplossing");
                }
            }
        }

        static private bool ChronologicalBackTrack(Sudoku sudoku)
        // Stuurt CBT aan
        {
            // Begin Backtrack recursie
            return ChronologicalBackTrack(sudoku, 0, 0);
        }

        static private bool ChronologicalBackTrack(Sudoku sudoku, int x, int y)
        // Recursieve gedeelte van CBT
        {
            // Check of we voorbij het einde van de rij zijn
            if (x == 9)
            {
                // Check of we bij het einde van de sudoku zijn, dus of we klaar zijn
                if (y == 8) return true;

                // Anders naar volgende rij gaan
                y++;
                x = 0;
            }

            // Als het vakje vast is hoeven we hem niet te checken
            if (sudoku.vakjes[x, y] != 0) return ChronologicalBackTrack(sudoku, x + 1, y);

            // Check voor alle getallen 1-9 of het getal legaal is in het vakje
            for (int getal = 1; getal < 10; getal++)
            {
                if (sudoku.IsLegaal(getal, x, y))
                {
                    // Als het getal legaal is vullen we hem in en gaan we verder met zoeken
                    sudoku.vakjes[x, y] = getal;
                    acties++;
                    if (ChronologicalBackTrack(sudoku, x + 1, y)) return true; // We zijn klaar dus return true
                }
            }

            // Geen oplossing in deze tak: zet vakje weer op 0 en return false (backtrack)
            sudoku.vakjes[x, y] = 0;
            return false;
        }
        

        static private bool ForwardCheckSolve(Sudoku sudoku)
        // Stuurt ForwardChecking aan
        {
            // We moeten per vakje het domein bijhouden
            bool[,,] domein = GetDomein(sudoku);

            // Begin recurie
            return ForwardCheck(sudoku, domein, 0, 0);
        }

        static private bool ForwardCheck(Sudoku sudoku, bool[,,] domein, int x, int y)
        // Recursief gedeelte van ForwardChecking
        {
            // Check of we aan het einde van de rij zijn
            if (x == 9)
            {
                // Check of we ook bij de laatste kolom zijn (dan zijn we klaar)
                if (y == 8) return true;

                // Ga naar volgende rij
                y++;
                x = 0;
            }
            // Als het vakje al ingevuld is skippen we hem
            if (sudoku.vakjes[x, y] != 0) return ForwardCheck(sudoku, domein, x + 1, y);

            bool[,,] domein_kopie = (bool[,,])domein.Clone();

            // Itereer over domein van vakje x,y
            for (int getal = 0; getal < 9; getal++)
            {
                if (domein[x, y, getal])
                {
                    // Vul getal in
                    sudoku.vakjes[x, y] = getal + 1;
                    acties++;
                    // Update domein
                    domein = UpdateDomain(sudoku, domein, getal, x, y);
                    // Ga verder in recursie
                    if (ForwardCheck(sudoku, domein, x + 1, y)) return true;
                    // Dit getal heeft geen oplossing opgeleverd: zet domein weer terug naar kopie zodat een nieuw getal geprobeerd kan worden
                    domein = (bool[,,])domein_kopie.Clone();
                }
            }
            // Dit vakje heeft geen oplossing opgeleverd: zet het weer op 0 en ga 'terug' in recursie
            sudoku.vakjes[x, y] = 0;
            return false;
        }

        static private bool ForwardCheckMCVSolve(Sudoku sudoku)
        // Stuurt ForwardCheckMCV aan
        {
            // Tel ingevulde vakjes
            int ingevuld = 0;
            for (int x = 0; x< 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    if (sudoku.vakjes[x, y] != 0) ingevuld++;
                }
            }

            // Get domein en volgorde en begin recursie
            bool[,,] domein = GetDomein(sudoku);
            Tuple<int, int>[] volgorde = UpdateVolgorde(domein);
            return ForwardCheckMCV(sudoku, domein, volgorde, ingevuld);
        }

        static private bool ForwardCheckMCV(Sudoku sudoku, bool[,,] domein, Tuple<int, int>[] volgorde, int ingevuld)
        // Recursief gedeelte van ForwardCheckMCV
        {
            // Check of we klaar zijn
            if (ingevuld == 81) return true;
            // Maak kopie van domein en volgorde 
            bool[,,] domein_kopie = (bool[,,])domein.Clone();
            Tuple<int, int>[] volgorde_kopie = (Tuple<int, int>[])volgorde.Clone();

            // Ga op volgorde langs de coordinaten (most constrained eerst)
            for (int i = 0; i < 81; i++)
            {
                int x = volgorde[i].Item1;
                int y = volgorde[i].Item2;
                if (sudoku.vakjes[x, y] != 0) continue;
                // Ga langs het domein van vakje x,y
                for (int getal = 0; getal < 9; getal++)
                {
                    if (domein[x, y, getal])
                    {
                        // Als een getal in het domein zit zetten we hem in de sudoku
                        sudoku.vakjes[x, y] = getal + 1;
                        acties++;
                        domein = UpdateDomain(sudoku, domein, getal, x, y); // Update daarna domein
                        if (!LeegDomein(domein)) // Alleen als het invullen van het getal geen leeg domein heeft opgeleverd kunnen we verder met recursie
                        {
                            volgorde = UpdateVolgorde(domein); // Update volgorde
                            if (ForwardCheckMCV(sudoku, domein, volgorde, ingevuld + 1)) return true; // Ga verder in recursie met actuele waardes
                            volgorde = (Tuple<int, int>[])volgorde_kopie.Clone();
                            // Dit getal heeft geen oplossing opgeleverd: Zet volgorde weer terug naar kopie 
                        }
                        // Dit getal heeft geen oplossing opgeleverd: zet domein weer terug naar kopie zodat een nieuw getal geprobeerd kan worden
                        domein = (bool[,,])domein_kopie.Clone();
                        sudoku.vakjes[x, y] = 0;
                    }                    
                }
            }
            // Geen oplossing in deze tak: ga 'terug' in recursie 
            return false;
        }

        static private bool[,,] UpdateDomain(Sudoku sudoku, bool[,,] domein, int getal, int x, int y)
        // Verwijdert waade getal uit domein van vakjes in dezelfde rij, kolom en blok als vakje x,y 
        // Vult domein van vakje x,y (maakt alleen uit dat het niet leeg is)
        {
            for (int i = 0; i < 9; i++)
            {
                if (sudoku.vakjes[x, i] == 0) domein[x, i, getal] = false; // Column
                if (sudoku.vakjes[i, y] == 0) domein[i, y, getal] = false; // Row
            }

            // 3x3 square
            int square_x = x - x % 3;
            int square_y = y - y % 3;

            for (int dx = 0; dx < 3; dx++)
            {
                for (int dy = 0; dy < 3; dy++)
                {
                    if (sudoku.vakjes[square_x + dx, square_y + dy] == 0) domein[square_x + dx, square_y + dy, getal] = false;
                }
            }

            for (int i = 0; i < 9; i++)
            {
                domein[x, y, i] = true; // Vakje x,y
            }

            return domein;
        }

        static private Tuple<int, int>[] UpdateVolgorde(bool[,,] domein)
        // Returnt een array van coordinaten op oplopende volgorde van domeingrootte
        // domeingrootte van 0 wordt hierbij als laatste gezet
        {
            // De lijst met coordinaten die we zullen returnen
            Tuple<int, int>[] res = new Tuple<int, int>[81];

            // Creëer 1 dimensionaal array van 3 waardes: (aantal keer true, x, y)
            Tuple<int, Tuple<int, int>>[] volgorde = new Tuple<int, Tuple<int, int>>[81];
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    int count = 0;
                    for (int k = 0; k < 9; k++) if (domein[x, y, k]) count++; // Tel aantal keer true
                    if (count == 0) count = 10; // Als het domein leeg is willen we dat deze aan het eind van de volgorde komt, door hem op 10 te zetten gebeurt dit
                    volgorde[x * 9 + y] = new Tuple<int, Tuple<int, int>>(count, new Tuple<int, int>(x, y)); // Voeg toe aan array op de juiste plek
                }
            }


            // Selection Sort op domeingrootte
            for (int i = 0; i < 81; i++)
            {
                int min_index = i;

                for (int j = i + 1; j < 81; j++)
                {
                    if (volgorde[j].Item1 < volgorde[min_index].Item1) // Check dat waarde niet nul is
                    {
                        //p($"{volgorde[j].Item1} < {volgorde[i].Item1}, min: ({volgorde[i].Item2.Item1}, {volgorde[i].Item2.Item2})");
                        min_index = j;
                    }
                }
                // Voeg coordinaat toe aan array
                res[i] = volgorde[min_index].Item2;
                // Swap waardes
                Tuple<int, Tuple<int, int>> temp = volgorde[i];
                volgorde[i] = volgorde[min_index];
                volgorde[min_index] = temp;
            }       
            return res;
        }

        static private bool LeegDomein(bool[,,] domein)
        // Checkt of er een leeg domein is
        {
            // Itereer over domeinen
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    bool leeg = true;
                    for (int z = 0; z < 9; z++) if (domein[x, y, z]) leeg = false;
                    if (leeg) return true; // Er is een leeg domein
                }
            }
            return false;
        }

        static private bool[,,] GetDomein(Sudoku sudoku)
        // Berekent alle domeinen van de vakjes van een sudoku en slaat ze op in een array
        {
            bool[,,] domein = new bool[9, 9, 9];
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    if (sudoku.vakjes[x, y] == 0)
                    {
                        // Ga alle getallen 1-9 langs en sla legaliteit op in array
                        for (int getal = 1; getal < 10; getal++)
                        {
                            domein[x, y, getal - 1] = sudoku.IsLegaal(getal, x, y);
                        }
                    } 
                    else
                    {
                        // Als het vakje al vol is vullen we het domein (maakt alleen uit dat hij niet leeg is voor MCV)
                        for (int i = 0; i < 9; i++) domein[x, y, i] = true;
                    } 
                }
            }
            return domein;   
        }
    }

    class Sudoku
    {
        // Slaat een 9x9 array van getallen op
        public int[,] vakjes;

        public Sudoku(string input)
        {
            // Parseert inputstring tot een sudoku
            vakjes = new int[9, 9];
            string[] s = input.Split(' ');
            for (int i = 0; i < s.Length - 1; i++) // Eerste element is " ", vandaar - 1
            {
                int x = i % 9;
                int y = i / 9;
                vakjes[x, y] = int.Parse(s[i + 1]); // en hier + 1
            }
        }

        public int[] Rij(int y)
        {
            // Returnt de getallen in de vakjes in de rij op y-coordinaat y
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[i, y];
            }
            return res;
        }

        public int[] Kolom(int x)
        {
            // Returnt de getallen in de vakjes in de kolom op x-coordinaat x
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[x, i];
            }
            return res;
        }

        public int[] Blok(int x, int y)
        {
            // Returnt de getallen in het 3x3 blok van het vakje op x,y
            int[] res = new int[9];
            // Vind de linkerbovenhoek van het 3x3 blok
            int blok_x = x - x % 3;
            int blok_y = y - y % 3;
            // Ga de vakjes langs
            for (int dx = 0; dx < 3; dx++)
            {
                for (int dy = 0; dy < 3; dy++)
                {
                    res[dx * 3 + dy] = vakjes[blok_x + dx, blok_y + dy];
                }
            }
            return res;
        }

        public bool IsLegaal(int getal, int x, int y)
        // Checkt of getal in vakje x,y van sudoku legaal zou zijn
        {
            // Check rij, kolom en 3x3 blok van het vakje: constraints
            return !(Rij(y).Contains(getal) || Kolom(x).Contains(getal) || Blok(x, y).Contains(getal));
        }

        public override string ToString()
        {
            // "tekent" de sudoku
            string res = "";

            res += "-------------------------";
            for (int i = 0; i < 3; i++)
            {
                res += "\n";
                for (int j = 0; j < 3; j++)
                {
                    res += "|";
                    for (int k = 0; k < 3; k++)
                    {
                        res += " ";
                        for (int l = 0; l < 3; l++)
                        {
                            int x = (27 * i + 9 * j + 3 * k + 1 * l) % 9;
                            int y = (27 * i + 9 * j + 3 * k + 1 * l) / 9;
                            res += vakjes[x, y] + " ";
                        }
                        res += "|";
                    }
                    res += "\n";
                }
                res += "-------------------------";
            }
            return res;
        }
    }
}
