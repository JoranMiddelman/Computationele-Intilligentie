using System.Globalization;
using System.Runtime.Intrinsics.X86;

namespace sudoku
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string input = Console.ReadLine();
            Sudoku s = new Sudoku(input);
            Console.WriteLine(s);
        }
    }

    class Sudoku
    {
        public Vak[,] vakjes;
        int evaluatiescore;

        public Sudoku(string input)
        {
            // Parseert inputstring tot een sudoku
            vakjes = new Vak[9, 9];
            string[] s = input.Split(' ');
            for (int y = 0; y < 9; y++)
            {
                for (int x = 0; x < 9; x++)
                {
                    vakjes[x, y] = new Vak(int.Parse(s[y * 9 + x + 1])); // + 1 omdat het eerste element "" zal zijn
                }
            }
            // Bij initialisatie moeten de blokken ingevuld worden en moet de evaluatiescore berekend worden
            VulBlokken();
            evaluatiescore = Evalueer();
        }

        void VulBlokken()
        {
            // Ga coordinaten van de linkerbovenhoek van alle blokken langs
            for (int x = 0; x < 9; x += 3) 
            {
                for (int y = 0; y < 9; y += 3)
                {
                    VulBlok(x, y);
                }
            }
        }

        void VulBlok(int x, int y)
        {
            // Vult blok met linkerbovenhoek x,y in 

            List<int> getallen = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9}; // Lijst houdt overblijvende getallen bij

            // Ga vanuit linkerbovenhoek alle vakjes van het blok af om te kijken welke getallen er al inzitten
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (vakjes[x + i, y + j].vast)
                    {
                        getallen.Remove(vakjes[x + i, y + j].getal); // Verwijder getal van getallen die overbijven
                    }
                }
            }
            // Vul dan de lege vakjes in met getallen die nog niet gebruikt zijn
            int index = 0;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (!vakjes[x + i, y + j].vast)
                    {
                        vakjes[x + i, y + j].getal = getallen[index];
                        index++;
                    }
                }
            }
        }

        public int[] Rij(int y)
        {
            // Returnt de getallen in de vakjes in de rij op y-coordinaat y
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[i, y].getal;
            }
            return res;
        }

        public int[] Kolom(int x)
        {
            // Returnt de getallen in de vakjes in de kolom op x-coordinaat x
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[x, i].getal;
            }
            return res;
        }

        public override string ToString()
        {
            string res = "";
            for (int i = 0; i < 9; i++)
            {
                int[] k = Rij(i);
                for (int j = 0; j < 9; j++)
                {
                    res += k[j].ToString();
                }
                res += "\n";
            }
            return res;
        }

        /*static Sudoku HillClimbing()
        {
            Node huidig = een node maak funtie
            while(true)
            {  
                Node buur = successor functie met de 3 eisen
                if(buur.Value <= huidig)
                {
                    return huidig.State
                }
                
                huidig = buur
             }
        }
        */
        int Evalueer()
        {
            // Evalueert de hele sudoku
            int score = 0;
            // Ga alle rijen en kolommen van de sudoku af en tel scores op
            for (int x = 0; x < 9; x++)
            {
                score += Ontbrekende_Getallen(Kolom(x));
            }

            for (int y = 0; y < 9; y++)
            {
                score += Ontbrekende_Getallen(Rij(y));
            }

            return score;
        }

        bool Vind_Beste_Swap(int blok_x, int blok_y)
        {
            // Gaat alle mogelijke swaps in blok met als linkerbovenhoek x,y om de beste te vinden
            // Returnt true als de swap nuttig is, anders false
            int[] best_swap = new int[4];
            int best_score = int.MaxValue;
            // We willen een swap niet 2 keer bekijken, dus we tellen eerst tot 8
            for (int i = 0; i < 8; i++)
            {
                int a_x = i / 3;
                int a_y = i % 3;
                Vak a = vakjes[a_x + blok_x, a_y + blok_y];

                if (a.vast) continue;// Als a een vast vakje is kunnen we hem overslaan

                // Ga nu alle vakken die 'na' vak a komen langs, dus tel door vanaf a, deze keer wel tot 9
                for (int j = i + 1; j < 9; j++)
                {
                    int b_x = j / 3;
                    int b_y = j % 3;
                    Vak b = vakjes[b_x + blok_x, b_y + blok_y];
                    if (b.vast) continue; // Als b vast is kunnen we hem overslaan

                    // Er is een mogelijke swap gevonden
                    // Evalueer de swap
                    int swap_score = Evalueer_swap(a_x + blok_x, a_y + blok_y, b_x + blok_x, b_y + blok_y);
                    // Als dit de beste swap tot nu toe is slaan we hem op
                    if (swap_score < best_score)
                    {
                        best_score = swap_score;
                        best_swap[0] = a_x; best_swap[1] = a_y; best_swap[2] = b_x; best_swap[3] = b_y;
                    }
                }
            }
            // Als de score van de beste swap die we hebben gevonden kleiner dan of gelijk is aan 0 
            // (kleiner dan 0 betekent dat de swap een positief effect heeft) voeren we hem uit en updaten we de score
            if (best_score <= 0)
            {
                Swap(best_swap[0], best_swap[1], best_swap[2], best_swap[3]);
                evaluatiescore += best_score;
                return true; // Swap was nuttig: return true
            }
            return false; // Swap was niet nuttig: return false
        }

        static int Ontbrekende_Getallen(int[] x)
        {
            // Telt het aantal ontbrekende getallen in een rij/kolom
            int res = 0;
            for (int i = 1; i < 10; i++)
            {
                if (!x.Contains(i)) res++;
            }
            return res;
        }

        void Swap(int a_x, int a_y, int b_x, int b_y)
        {
            // Wisselt 2 vakjes om
            Vak temp = vakjes[a_x, a_y];
            vakjes[a_x, a_y] = vakjes[b_x, b_y];
            vakjes[b_x, b_y] = temp;
        }

        int Evalueer_swap(int a_x, int a_y, int b_x, int b_y)
        {
            // Ga alle relevante rijen en kolommen af en tel score op
            int prescore = 0;
            prescore += Ontbrekende_Getallen(Rij(a_y));
            prescore += Ontbrekende_Getallen(Rij(b_y));
            prescore += Ontbrekende_Getallen(Kolom(a_x));
            prescore += Ontbrekende_Getallen(Kolom(a_x));

            // Voer dan de swap uit en tel opnieuw de score
            Swap(a_x, a_y, b_x, b_y);
            int postscore = 0;
            postscore += Ontbrekende_Getallen(Rij(a_y));
            postscore += Ontbrekende_Getallen(Rij(b_y));
            postscore += Ontbrekende_Getallen(Kolom(a_x));
            postscore += Ontbrekende_Getallen(Kolom(a_x));
            // Swap weer terug
            Swap(a_x, a_y, b_x, b_y);
            // Score van de swap is makkelijk te berekenen
            return postscore - prescore;
        }
    }

    class Vak
    {
        public readonly bool vast;
        public int getal;

        public Vak(int Getal)
        {
            this.getal = Getal;
            this.vast = getal != 0;
        }

        public override string ToString()
        {
            return getal.ToString();
        }
    }

    class Node
    {
        public Sudoku State { get; }
        public int Value { get; }

        public Node(Sudoku state, int value)
        {
            State = state;
            Value = value;
        }
    }
}
