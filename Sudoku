using System.Globalization;
using System.Runtime.Intrinsics.X86;

namespace sudoku
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string input = Console.ReadLine();
            Sudoku sudoku = new Sudoku(input);
            SudokuSolver solver = new SudokuSolver(sudoku);
        }
    }

    class SudokuSolver
    {
        Sudoku sudoku;
        int evaluatiescore;
        Random rnd;

        public SudokuSolver(Sudoku sudoku)
        {
            this.sudoku = sudoku;
            // Initialisatie
            Console.WriteLine(sudoku); // Print de ingevoerde sudoku
            VulBlokken(); // vul blokken 
            rnd = new Random(); // initialiseer randomiser
            evaluatiescore = Evalueer(); // Evalueer de hele sudoku om een startscore te hebben
            // Los daarna de sudoku op
            Console.WriteLine("Solving...");
            Solve();
        }

        void Solve()
        {
            // Methode die alles aanstuurt om de sudoku op te lossen
            int iters_sinds_swap = 0; // Houdt bij hoeveel iteraties sinds de vorige nuttige swap
            int plateaugrens = 12; // Als deze grens overschreden wordt stagneert het programma
            int random_walk_lengte = 10; // Aantal keer dat de zoekfunctie wordt uitgevoerd bij een random walk
            List<(int, int)> gecheckte_blokken = new List<(int, int)>(); // Houdt bij welke blokken er al gecheckt zijn om te voorkomen dat er onnodie checks worden gedaan
            // Blijf de beste swap vinden en uitvoeren totdat een oplossing gevonden is of tot het programma stagneert
            while (evaluatiescore != 0 && iters_sinds_swap < plateaugrens)
            {
                // Kies een willekeurig blok uit en vind de beste swap in dat blok
                int x = rnd.Next(0, 3);
                int y = rnd.Next(0, 3);
                // Check of het blok al gecheckt is sinds de laatste swap
                if (gecheckte_blokken.Contains((x, y))) 
                { 
                    iters_sinds_swap++; 
                    continue; // Dit blok hoeft niet gecheckt te worden
                } 
                // Check het blok
                if (Vind_Beste_Swap(x * 3, y * 3, false))
                {
                    iters_sinds_swap = 0; // Nuttige swap gevonden: iters_sinds_swap op 0
                    gecheckte_blokken.Clear(); // Leeg de lijst met gecheckte blokken
                }
                else
                {
                    iters_sinds_swap++; // Geen nuttige swap gevonden: iters_sinds_swap met 1 verhogen
                    gecheckte_blokken.Add((x, y)); // Dit blok is gecheckt 
                }
            }

            if (evaluatiescore == 0) // We zijn klaar! print de opgeloste sudoku
            {
                Console.WriteLine(sudoku);
            }
            else
            {
                // Het algoritme stagneert: doe een Random walk en probeer daarna opnieuw op te lossen
                Random_Walk(random_walk_lengte);
                Solve();
            }
        }

        void Random_Walk(int lengte)
        {
            // Laat lengte keer de zoekfunctie iets swappen zonder naar de evaluatiescore te kijken
            for (int i = 0; i < lengte; i++)
            {
                // Doe dit in een willekeurig blok
                int x = rnd.Next(0, 3);
                int y = rnd.Next(0, 3);
                Vind_Beste_Swap(x * 3, y * 3, true);
            }
        }

        void VulBlokken()
        {
            // Vult blokken op (vervangt nullen door toegestane getallen
            // Ga coordinaten van de linkerbovenhoek van alle blokken langs
            for (int blok_x = 0; blok_x < 9; blok_x += 3)
            {
                for (int blok_y = 0; blok_y < 9; blok_y += 3)
                {
                    // En vul elk blok
                    VulBlok(blok_x, blok_y);
                }
            }
        }

        void VulBlok(int blok_x, int blok_y)
        {
            // Vult blok met linkerbovenhoek blok_x,blok_y in 

            List<int> getallen = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // Lijst houdt overblijvende getallen bij

            // Ga vanuit linkerbovenhoek alle vakjes van het blok af om te kijken welke getallen er al inzitten
            for (int vak_x = 0; vak_x < 3; vak_x++)
            {
                for (int vak_y = 0; vak_y < 3; vak_y++)
                {
                    if (sudoku.vakjes[blok_x + vak_x, blok_y + vak_y].vast)
                    {
                        getallen.Remove(sudoku.vakjes[blok_x + vak_x, blok_y + vak_y].getal); // Verwijder getal van getallen die overbijven
                    }
                }
            }
            // Vul dan de lege vakjes in met getallen die nog niet gebruikt zijn
            int index = 0; // Index zal de lijst met overblijvende getallen doorlopen
            for (int vak_x = 0; vak_x < 3; vak_x++)
            {
                for (int vak_y = 0; vak_y < 3; vak_y++)
                {
                    if (!sudoku.vakjes[blok_x + vak_x, blok_y + vak_y].vast) // Leeg vakje
                    {
                        sudoku.vakjes[blok_x + vak_x, blok_y + vak_y].getal = getallen[index]; // Vul het vakje
                        index++; // volgende getal
                    }
                }
            }
        }

        int Evalueer()
        {
            // Evalueert de hele sudoku
            int score = 0;
            // Ga alle rijen en kolommen van de sudoku af en tel scores op
            for (int i = 0; i < 9; i++)
            {
                score += Ontbrekende_Getallen(sudoku.Kolom(i));
                score += Ontbrekende_Getallen(sudoku.Rij(i));
            }

            return score;
        }

        bool Vind_Beste_Swap(int blok_x, int blok_y, bool ILS)
        {
            // Gaat alle mogelijke swaps in blok met als linkerbovenhoek blok_x,blok_y na om de beste te vinden
            // Returnt true als de swap nuttig is, anders false
            // Wanneer ILS true is zal de methode niet naar evaluatiescores kijken
            int[] best_swap = new int[4];
            int best_score = int.MaxValue;
            // Ga alle mogelijke swaps langs
            // We willen een swap niet 2 keer bekijken, dus we tellen eerst tot 8
            for (int i = 0; i < 8; i++)
            {
                int a_x = i / 3 + blok_x;
                int a_y = i % 3 + blok_y;
                Vak a = sudoku.vakjes[a_x, a_y];

                if (a.vast) continue; // Als a een vast vakje is kunnen we hem overslaan

                // Ga nu alle vakken die 'na' vak a komen langs, dus tel door vanaf a, deze keer wel tot 9
                for (int j = i + 1; j < 9; j++)
                {
                    int b_x = j / 3 + blok_x;
                    int b_y = j % 3 + blok_y;
                    Vak b = sudoku.vakjes[b_x, b_y];

                    if (b.vast) continue; // Als b vast is kunnen we hem ook overslaan

                    // Er is een mogelijke swap gevonden
                    int swap_score = Evalueer_swap(a_x, a_y, b_x, b_y); // Evalueer de swap
                    // Als dit de beste swap tot nu toe is slaan we hem op
                    if (swap_score < best_score)
                    {
                        best_score = swap_score;
                        best_swap[0] = a_x; best_swap[1] = a_y; best_swap[2] = b_x; best_swap[3] = b_y;
                    }
                }
            }
            // Als de score van de beste swap die we hebben gevonden kleiner dan of gelijk is aan 0 
            // (kleiner dan 0 betekent dat de swap een positief effect heeft) voeren we hem uit en updaten we de score
            // Als ILS true is voeren we hem sowieso uit
            if (best_score <= 0 || ILS)
            {
                Swap(best_swap[0], best_swap[1], best_swap[2], best_swap[3]); // Voer swap uit
                evaluatiescore += best_score; // Update evaluatiescore
                return true; // Nuttige swap gevonden: return true
            }
            return false; // Geen nuttige swap gevonden: return false
        }

        static int Ontbrekende_Getallen(int[] x)
        {
            // Telt het aantal ontbrekende getallen in een rij/kolom
            int res = 0;
            for (int i = 1; i < 10; i++)
            {
                if (!x.Contains(i)) res++;
            }
            return res;
        }

        void Swap(int a_x, int a_y, int b_x, int b_y)
        {
            // Wisselt 2 vakjes om
            Vak temp = sudoku.vakjes[a_x, a_y];
            sudoku.vakjes[a_x, a_y] = sudoku.vakjes[b_x, b_y];
            sudoku.vakjes[b_x, b_y] = temp;
        }

        int Evalueer_swap(int a_x, int a_y, int b_x, int b_y)
        {
            // Berekent de invloed die een swap zou hebben op de evaluatiuescore
            // Ga alle relevante rijen en kolommen af en tel scores van deze rijen en kolommen op VOOR de swap
            int prescore = 0;
            prescore += Ontbrekende_Getallen(sudoku.Rij(a_y));
            prescore += Ontbrekende_Getallen(sudoku.Rij(b_y));
            prescore += Ontbrekende_Getallen(sudoku.Kolom(a_x));
            prescore += Ontbrekende_Getallen(sudoku.Kolom(b_x));

            // Voer dan de swap uit en tel opnieuw de score
            Swap(a_x, a_y, b_x, b_y);

            int postscore = 0;
            postscore += Ontbrekende_Getallen(sudoku.Rij(a_y));
            postscore += Ontbrekende_Getallen(sudoku.Rij(b_y));
            postscore += Ontbrekende_Getallen(sudoku.Kolom(a_x));
            postscore += Ontbrekende_Getallen(sudoku.Kolom(b_x));

            Swap(a_x, a_y, b_x, b_y); // Swap weer terug
            // Score van de swap is makkelijk te berekenen: score na - score voor
            return postscore - prescore;
        }
    }

    class Sudoku
    {
        // Slaat een 9x9 array van vakjes op
        public Vak[,] vakjes;

        public Sudoku(string input)
        {
            // Parseert inputstring tot een sudoku
            vakjes = new Vak[9, 9];
            string[] s = input.Split(' ');
            for (int y = 0; y < 9; y++)
            {
                for (int x = 0; x < 9; x++)
                {
                    vakjes[x, y] = new Vak(int.Parse(s[y * 9 + x + 1])); // + 1 omdat het eerste element "" zal zijn
                }
            }
        }

        public int[] Rij(int y)
        {
            // Returnt de getallen in de vakjes in de rij op y-coordinaat y
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[i, y].getal;
            }
            return res;
        }

        public int[] Kolom(int x)
        {
            // Returnt de getallen in de vakjes in de kolom op x-coordinaat x
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[x, i].getal;
            }
            return res;
        }

        public override string ToString()
        {
            // "tekent" de sudoku
            string res = "";

            res += "-------------------------";
            for (int i = 0; i < 3; i++)
            {
                res += "\n";
                for (int j = 0; j < 3; j++)
                {
                    res += "|";
                    for (int k = 0; k < 3; k++)
                    {
                        res += " ";
                        for (int l = 0; l < 3; l++)
                        {
                            int x = (27 * i + 9 * j + 3 * k + 1 * l) / 9;
                            int y = (27 * i + 9 * j + 3 * k + 1 * l) % 9;
                            res += vakjes[x, y] + " ";
                        }
                        res += "|";
                    }
                    res += "\n";
                }
                res += "-------------------------";
            }
            return res;
        }
    }

    class Vak
    {
        // Slaat getal op en of het vakje vast is
        public readonly bool vast;
        public int getal;

        public Vak(int Getal)
        {
            this.getal = Getal;
            this.vast = getal != 0;
        }

        public override string ToString()
        {
            return getal.ToString();
        }
    }
}
