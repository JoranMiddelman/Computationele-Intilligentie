using System.Globalization;

namespace practicum1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string input = Console.ReadLine();
            Sudoku s = new Sudoku(input);
            Console.WriteLine(s);
        }
    }

    class Sudoku
    {
        public Vak[,] vakjes;

        public Sudoku(string input)
        {
            vakjes = new Vak[9, 9];
            string[] s = input.Split(' ');
            for (int y = 0; y < 9; y++)
            {
                for (int x = 0; x < 9; x++)
                {
                    vakjes[x, y] = new Vak(int.Parse(s[y * 9 + x + 1])); // + 1 omdat het eerste element "" zal zijn
                }
            }
            VulBlokken();
        }



        public Vak[] Rij(int y)
        {
            Vak[] res = new Vak[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[i, y];
            }
            return res;
        }

        public Vak[] Kolom(int x)
        {
            Vak[] res = new Vak[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[x, i];
            }
            return res;
        }

        public override string ToString()
        {
            string res = "";
            for (int i = 0; i < 9; i++)
            {
                Vak[] k = Rij(i);
                for (int j = 0; j < 9; j++)
                {
                    res += k[j].ToString();
                }
                res += "\n";
            }
            return res;
        }

      /*static Sudoku HillClimbing()
        {
            Node huidig = een node maak funtie
            while(true)
            {  
                Node buur = successor functie met de 3 eisen
                if(buur.Value <= huidig)
                {
                    return huidig.State
                }
                
                huidig = buur
             }
        }
        */
        void VulBlokken()
        {
            // Ga coordinaten van de linkerbovenhoek van alle blokken langs
            for (int x = 0; x < 9; x += 3) 
            {
                for (int y = 0; y < 9; y += 3)
                {
                    VulBlok(x, y);
                }
            }
        }

        void VulBlok(int x, int y)
        {
            // vakjes[x,y] is de linkerbovenhoek van het blok dat ingevuld moet worden
            // Ga vanuit startpunt alle vakjes van het blok af om te kijken welke getallen er al inzitten
            List<int> getallen = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9}; // Lijst houdt overblijvende getallen bij

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (vakjes[x + i, y + j].vast)
                    {
                        getallen.Remove(vakjes[x + i, y + j].getal); // Verwijder getal van getallen die overbijven
                    }
                }
            }
            // Vul dan de lege vakjes in met getallen die nog niet gebruikt zijn
            int index = 0;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (!vakjes[x + i, y + j].vast)
                    {
                        vakjes[x + i, y + j].getal = getallen[index];
                        index++;
                    }
                }
            }
        }

    }
 

    class Vak
    {
        public readonly bool vast;
        public int getal;

        public Vak(int Getal)
        {
            this.getal = Getal;
            this.vast = getal != 0;
        }

        public override string ToString()
        {
            return getal.ToString();
        }
    }

    class Node
    {
        public Sudoku State { get; }
        public int Value { get; }

        public Node(Sudoku state, int value)
        {
            State = state;
            Value = value;
        }
    }

}
