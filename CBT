using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.Intrinsics.X86;


namespace CBT_sudoku
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Sudoku sudoku = new Sudoku(" 0 0 3 0 2 0 6 0 0 9 0 0 3 0 5 0 0 1 0 0 1 8 0 6 4 0 0 0 0 8 1 0 2 9 0 0 7 0 0 0 0 0 0 0 8 0 0 6 7 0 8 2 0 0 0 0 2 6 0 9 5 0 0 8 0 0 2 0 3 0 0 9 0 0 5 0 1 0 3 0 0");
            Console.WriteLine(sudoku);
            SudokuSolver solver = new SudokuSolver();
            solver.Solve("CBT", sudoku);
        }
    }

    class SudokuSolver
    {
        public void Solve(string methode, Sudoku sudoku)
        {
            // Check of de doorgevoerde methode geldig is
            if (methode != "CBT" && methode != "FC" && methode != "FCMCV") Console.WriteLine("Voer een geldige methode in");
            // Als hij geldig is, los de sudoku op met de juiste methode
            else
            {
                Stopwatch timer = new Stopwatch();
                timer.Start();
                bool oplosbaar = true;

                switch (methode)
                {
                    case "CBT":
                        oplosbaar = BackTrackSolve(0, 0, sudoku);
                        break;

                    case "FC":
                        oplosbaar = true;
                        break;

                    case "FCMCV":
                        oplosbaar = false;
                        break;
                }

                timer.Stop();
                // Print het resulaat
                if (oplosbaar)
                {
                    Console.WriteLine(sudoku);
                    Console.WriteLine($"Opgelost in {timer.ElapsedMilliseconds} ms");
                }
                else
                {
                    Console.WriteLine("geen oplossing");
                }
            }
        }

        private static bool BackTrackSolve(int x, int y, Sudoku sudoku)
        {
            // Check of we voorbij het einde van de rij zijn
            if (x == 9)
            {
                // Check of we bij het einde van de sudoku zijn, dus of we klaar zijn
                if (y == 8) return true;

                // Anders naar volgende rij gaan
                y++;
                x = 0;
            }

            // Als het vakje vast is hoeven we hem niet te checken
            if (sudoku.vakjes[x, y].vast) return BackTrackSolve(x + 1, y, sudoku);

            // Check voor alle getallen 1-9 of het getal legaal is in het vakje
            for (int getal = 1; getal < 10; getal++)
            {
                if (Legaal(x, y, getal, sudoku))
                {
                    // Als het getal legaal is vullen we hem in en gaan we verder met zoeken
                    sudoku.vakjes[x, y].getal = getal;
                    if (BackTrackSolve(x + 1, y, sudoku)) return true; // Return zorgt ervoor dat we uit de recursie gaan als we klaar zijn
                }
            }

            // Geen oplossing in deze tak: zet vakje weer op 0 en return false (backtrack)
            sudoku.vakjes[x, y].getal = 0;
            return false;
        }

        private static bool Legaal(int x, int y, int getal, Sudoku sudoku)
        {
            // Check rij en kolom
            if (sudoku.Rij(y).Contains(getal)) return false;
            if (sudoku.Kolom(x).Contains(getal)) return false;

            // Check het 3x3 vak 
            // Coordinaten van de linkerbovenhoek van het vak waarin 
            int blok_x = x - x % 3;
            int blok_y = y - y % 3;
            // Ga het vak langs vanaf de linkerbovenhoek
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (sudoku.vakjes[blok_x + i, blok_y + j].getal == getal) return false;
                }   
            }
            // Legaal
            return true;
        }
    }

    class Sudoku
    {
        // Slaat een 9x9 array van vakjes op
        public Vak[,] vakjes;

        public Sudoku(string input)
        {
            // Parseert inputstring tot een sudoku
            vakjes = new Vak[9, 9];
            string[] s = input.Split(' ');
            for (int i = 0; i < s.Length - 1; i++) // Eerste element is " ", vandaar - 1
            {
                int x = i % 9;
                int y = i / 9;
                vakjes[x, y] = new Vak(int.Parse(s[i + 1])); // en hier + 1
            }
        }

        public int[] Rij(int y)
        {
            // Returnt de getallen in de vakjes in de rij op y-coordinaat y
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[i, y].getal;
            }
            return res;
        }

        public int[] Kolom(int x)
        {
            // Returnt de getallen in de vakjes in de kolom op x-coordinaat x
            int[] res = new int[9];
            for (int i = 0; i < 9; i++)
            {
                res[i] = vakjes[x, i].getal;
            }
            return res;
        }

        public override string ToString()
        {
            // "tekent" de sudoku
            string res = "";

            res += "-------------------------";
            for (int i = 0; i < 3; i++)
            {
                res += "\n";
                for (int j = 0; j < 3; j++)
                {
                    res += "|";
                    for (int k = 0; k < 3; k++)
                    {
                        res += " ";
                        for (int l = 0; l < 3; l++)
                        {
                            int x = (27 * i + 9 * j + 3 * k + 1 * l) % 9;
                            int y = (27 * i + 9 * j + 3 * k + 1 * l) / 9;
                            res += vakjes[x, y] + " ";
                        }
                        res += "|";
                    }
                    res += "\n";
                }
                res += "-------------------------";
            }
            return res;
        }
    }

    class Vak
    {
        // Slaat getal op en of het vakje vast is
        public readonly bool vast;
        public int getal;

        public Vak(int Getal)
        {
            this.getal = Getal;
            this.vast = getal != 0;
        }

        public override string ToString()
        {
            return getal.ToString();
        }
    }
}
